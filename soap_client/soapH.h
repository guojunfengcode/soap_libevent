/* soapH.h
   Generated by gSOAP 2.8.95 for calc.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

#ifdef SOAP_DEFAULT_byte
#define soap_default_byte(soap, a) (*(a) = SOAP_DEFAULT_byte)
#else
#define soap_default_byte(soap, a) (*(a) = (char)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_byte
#define soap_PUT_byte(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_byte
#define soap_PATCH_byte(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_byte
#define soap_POST_send_byte(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_byte
#define soap_GET_byte(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_byte(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_byte
#define soap_POST_recv_byte(soap, data) ( soap_read_byte(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

#ifdef SOAP_DEFAULT_int
#define soap_default_int(soap, a) (*(a) = SOAP_DEFAULT_int)
#else
#define soap_default_int(soap, a) (*(a) = (int)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_int
#define soap_PUT_int(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_int
#define soap_PATCH_int(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_int
#define soap_POST_send_int(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_int
#define soap_GET_int(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_int(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_int
#define soap_POST_recv_int(soap, data) ( soap_read_int(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

#ifdef SOAP_DEFAULT_double
#define soap_default_double(soap, a) (*(a) = SOAP_DEFAULT_double)
#else
#define soap_default_double(soap, a) (*(a) = (double)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_double(soap, data, "double", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_double
#define soap_PUT_double(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_double(soap, data, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_double
#define soap_PATCH_double(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_double(soap, data, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_double
#define soap_POST_send_double(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_double(soap, data, "double", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_double
#define soap_GET_double(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_double(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_double
#define soap_POST_recv_double(soap, data) ( soap_read_double(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_new_SOAP_ENV__Fault(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Fault
#define soap_PUT_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Fault
#define soap_PATCH_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Fault
#define soap_POST_send_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Fault
#define soap_GET_SOAP_ENV__Fault(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Fault
#define soap_POST_recv_SOAP_ENV__Fault(soap, data) ( soap_read_SOAP_ENV__Fault(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_new_SOAP_ENV__Reason(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Reason
#define soap_PUT_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Reason
#define soap_PATCH_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Reason
#define soap_POST_send_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Reason
#define soap_GET_SOAP_ENV__Reason(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Reason
#define soap_POST_recv_SOAP_ENV__Reason(soap, data) ( soap_read_SOAP_ENV__Reason(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_new_SOAP_ENV__Detail(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Detail
#define soap_PUT_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Detail
#define soap_PATCH_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Detail
#define soap_POST_send_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Detail
#define soap_GET_SOAP_ENV__Detail(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Detail
#define soap_POST_recv_SOAP_ENV__Detail(soap, data) ( soap_read_SOAP_ENV__Detail(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_new_SOAP_ENV__Code(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Code
#define soap_PUT_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Code
#define soap_PATCH_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Code
#define soap_POST_send_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Code
#define soap_GET_SOAP_ENV__Code(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Code
#define soap_POST_recv_SOAP_ENV__Code(soap, data) ( soap_read_SOAP_ENV__Code(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_new_SOAP_ENV__Header(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Header
#define soap_PUT_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Header
#define soap_PATCH_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Header
#define soap_POST_send_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Header(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Header
#define soap_GET_SOAP_ENV__Header(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Header
#define soap_POST_recv_SOAP_ENV__Header(soap, data) ( soap_read_SOAP_ENV__Header(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef SOAP_TYPE_ns2__pow_DEFINED
#define SOAP_TYPE_ns2__pow_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__pow(struct soap*, struct ns2__pow *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__pow(struct soap*, const struct ns2__pow *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__pow(struct soap*, const char*, int, const struct ns2__pow *, const char*);
SOAP_FMAC3 struct ns2__pow * SOAP_FMAC4 soap_in_ns2__pow(struct soap*, const char*, struct ns2__pow *, const char*);

SOAP_FMAC3 struct ns2__pow * SOAP_FMAC4 soap_new_ns2__pow(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__pow(struct soap*, const struct ns2__pow *, const char*, const char*);

#ifndef soap_write_ns2__pow
#define soap_write_ns2__pow(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__pow(soap, data), 0) || soap_put_ns2__pow(soap, data, "ns2:pow", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__pow
#define soap_PUT_ns2__pow(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__pow(soap, data), 0) || soap_put_ns2__pow(soap, data, "ns2:pow", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns2__pow
#define soap_PATCH_ns2__pow(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__pow(soap, data), 0) || soap_put_ns2__pow(soap, data, "ns2:pow", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns2__pow
#define soap_POST_send_ns2__pow(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__pow(soap, data), 0) || soap_put_ns2__pow(soap, data, "ns2:pow", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__pow * SOAP_FMAC4 soap_get_ns2__pow(struct soap*, struct ns2__pow *, const char*, const char*);

#ifndef soap_read_ns2__pow
#define soap_read_ns2__pow(soap, data) ( ((data) ? (soap_default_ns2__pow(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__pow(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__pow
#define soap_GET_ns2__pow(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__pow(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns2__pow
#define soap_POST_recv_ns2__pow(soap, data) ( soap_read_ns2__pow(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__powResponse_DEFINED
#define SOAP_TYPE_ns2__powResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__powResponse(struct soap*, struct ns2__powResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__powResponse(struct soap*, const struct ns2__powResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__powResponse(struct soap*, const char*, int, const struct ns2__powResponse *, const char*);
SOAP_FMAC3 struct ns2__powResponse * SOAP_FMAC4 soap_in_ns2__powResponse(struct soap*, const char*, struct ns2__powResponse *, const char*);

SOAP_FMAC3 struct ns2__powResponse * SOAP_FMAC4 soap_new_ns2__powResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__powResponse(struct soap*, const struct ns2__powResponse *, const char*, const char*);

#ifndef soap_write_ns2__powResponse
#define soap_write_ns2__powResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__powResponse(soap, data), 0) || soap_put_ns2__powResponse(soap, data, "ns2:powResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__powResponse
#define soap_PUT_ns2__powResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__powResponse(soap, data), 0) || soap_put_ns2__powResponse(soap, data, "ns2:powResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns2__powResponse
#define soap_PATCH_ns2__powResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__powResponse(soap, data), 0) || soap_put_ns2__powResponse(soap, data, "ns2:powResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns2__powResponse
#define soap_POST_send_ns2__powResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__powResponse(soap, data), 0) || soap_put_ns2__powResponse(soap, data, "ns2:powResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__powResponse * SOAP_FMAC4 soap_get_ns2__powResponse(struct soap*, struct ns2__powResponse *, const char*, const char*);

#ifndef soap_read_ns2__powResponse
#define soap_read_ns2__powResponse(soap, data) ( ((data) ? (soap_default_ns2__powResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__powResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__powResponse
#define soap_GET_ns2__powResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__powResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns2__powResponse
#define soap_POST_recv_ns2__powResponse(soap, data) ( soap_read_ns2__powResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__inq_DEFINED
#define SOAP_TYPE_ns2__inq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__inq(struct soap*, struct ns2__inq *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__inq(struct soap*, const struct ns2__inq *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__inq(struct soap*, const char*, int, const struct ns2__inq *, const char*);
SOAP_FMAC3 struct ns2__inq * SOAP_FMAC4 soap_in_ns2__inq(struct soap*, const char*, struct ns2__inq *, const char*);

SOAP_FMAC3 struct ns2__inq * SOAP_FMAC4 soap_new_ns2__inq(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__inq(struct soap*, const struct ns2__inq *, const char*, const char*);

#ifndef soap_write_ns2__inq
#define soap_write_ns2__inq(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__inq(soap, data), 0) || soap_put_ns2__inq(soap, data, "ns2:inq", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__inq
#define soap_PUT_ns2__inq(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__inq(soap, data), 0) || soap_put_ns2__inq(soap, data, "ns2:inq", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns2__inq
#define soap_PATCH_ns2__inq(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__inq(soap, data), 0) || soap_put_ns2__inq(soap, data, "ns2:inq", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns2__inq
#define soap_POST_send_ns2__inq(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__inq(soap, data), 0) || soap_put_ns2__inq(soap, data, "ns2:inq", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__inq * SOAP_FMAC4 soap_get_ns2__inq(struct soap*, struct ns2__inq *, const char*, const char*);

#ifndef soap_read_ns2__inq
#define soap_read_ns2__inq(soap, data) ( ((data) ? (soap_default_ns2__inq(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__inq(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__inq
#define soap_GET_ns2__inq(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__inq(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns2__inq
#define soap_POST_recv_ns2__inq(soap, data) ( soap_read_ns2__inq(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__inqResponse_DEFINED
#define SOAP_TYPE_ns2__inqResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__inqResponse(struct soap*, struct ns2__inqResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__inqResponse(struct soap*, const struct ns2__inqResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__inqResponse(struct soap*, const char*, int, const struct ns2__inqResponse *, const char*);
SOAP_FMAC3 struct ns2__inqResponse * SOAP_FMAC4 soap_in_ns2__inqResponse(struct soap*, const char*, struct ns2__inqResponse *, const char*);

SOAP_FMAC3 struct ns2__inqResponse * SOAP_FMAC4 soap_new_ns2__inqResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__inqResponse(struct soap*, const struct ns2__inqResponse *, const char*, const char*);

#ifndef soap_write_ns2__inqResponse
#define soap_write_ns2__inqResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__inqResponse(soap, data), 0) || soap_put_ns2__inqResponse(soap, data, "ns2:inqResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__inqResponse
#define soap_PUT_ns2__inqResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__inqResponse(soap, data), 0) || soap_put_ns2__inqResponse(soap, data, "ns2:inqResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns2__inqResponse
#define soap_PATCH_ns2__inqResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__inqResponse(soap, data), 0) || soap_put_ns2__inqResponse(soap, data, "ns2:inqResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns2__inqResponse
#define soap_POST_send_ns2__inqResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__inqResponse(soap, data), 0) || soap_put_ns2__inqResponse(soap, data, "ns2:inqResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__inqResponse * SOAP_FMAC4 soap_get_ns2__inqResponse(struct soap*, struct ns2__inqResponse *, const char*, const char*);

#ifndef soap_read_ns2__inqResponse
#define soap_read_ns2__inqResponse(soap, data) ( ((data) ? (soap_default_ns2__inqResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__inqResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__inqResponse
#define soap_GET_ns2__inqResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__inqResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns2__inqResponse
#define soap_POST_recv_ns2__inqResponse(soap, data) ( soap_read_ns2__inqResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__mod_DEFINED
#define SOAP_TYPE_ns2__mod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__mod(struct soap*, struct ns2__mod *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__mod(struct soap*, const struct ns2__mod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__mod(struct soap*, const char*, int, const struct ns2__mod *, const char*);
SOAP_FMAC3 struct ns2__mod * SOAP_FMAC4 soap_in_ns2__mod(struct soap*, const char*, struct ns2__mod *, const char*);

SOAP_FMAC3 struct ns2__mod * SOAP_FMAC4 soap_new_ns2__mod(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__mod(struct soap*, const struct ns2__mod *, const char*, const char*);

#ifndef soap_write_ns2__mod
#define soap_write_ns2__mod(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__mod(soap, data), 0) || soap_put_ns2__mod(soap, data, "ns2:mod", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__mod
#define soap_PUT_ns2__mod(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__mod(soap, data), 0) || soap_put_ns2__mod(soap, data, "ns2:mod", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns2__mod
#define soap_PATCH_ns2__mod(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__mod(soap, data), 0) || soap_put_ns2__mod(soap, data, "ns2:mod", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns2__mod
#define soap_POST_send_ns2__mod(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__mod(soap, data), 0) || soap_put_ns2__mod(soap, data, "ns2:mod", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__mod * SOAP_FMAC4 soap_get_ns2__mod(struct soap*, struct ns2__mod *, const char*, const char*);

#ifndef soap_read_ns2__mod
#define soap_read_ns2__mod(soap, data) ( ((data) ? (soap_default_ns2__mod(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__mod(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__mod
#define soap_GET_ns2__mod(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__mod(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns2__mod
#define soap_POST_recv_ns2__mod(soap, data) ( soap_read_ns2__mod(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__modResponse_DEFINED
#define SOAP_TYPE_ns2__modResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__modResponse(struct soap*, struct ns2__modResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__modResponse(struct soap*, const struct ns2__modResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__modResponse(struct soap*, const char*, int, const struct ns2__modResponse *, const char*);
SOAP_FMAC3 struct ns2__modResponse * SOAP_FMAC4 soap_in_ns2__modResponse(struct soap*, const char*, struct ns2__modResponse *, const char*);

SOAP_FMAC3 struct ns2__modResponse * SOAP_FMAC4 soap_new_ns2__modResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__modResponse(struct soap*, const struct ns2__modResponse *, const char*, const char*);

#ifndef soap_write_ns2__modResponse
#define soap_write_ns2__modResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__modResponse(soap, data), 0) || soap_put_ns2__modResponse(soap, data, "ns2:modResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__modResponse
#define soap_PUT_ns2__modResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__modResponse(soap, data), 0) || soap_put_ns2__modResponse(soap, data, "ns2:modResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns2__modResponse
#define soap_PATCH_ns2__modResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__modResponse(soap, data), 0) || soap_put_ns2__modResponse(soap, data, "ns2:modResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns2__modResponse
#define soap_POST_send_ns2__modResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__modResponse(soap, data), 0) || soap_put_ns2__modResponse(soap, data, "ns2:modResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__modResponse * SOAP_FMAC4 soap_get_ns2__modResponse(struct soap*, struct ns2__modResponse *, const char*, const char*);

#ifndef soap_read_ns2__modResponse
#define soap_read_ns2__modResponse(soap, data) ( ((data) ? (soap_default_ns2__modResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__modResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__modResponse
#define soap_GET_ns2__modResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__modResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns2__modResponse
#define soap_POST_recv_ns2__modResponse(soap, data) ( soap_read_ns2__modResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__del_DEFINED
#define SOAP_TYPE_ns2__del_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__del(struct soap*, struct ns2__del *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__del(struct soap*, const struct ns2__del *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__del(struct soap*, const char*, int, const struct ns2__del *, const char*);
SOAP_FMAC3 struct ns2__del * SOAP_FMAC4 soap_in_ns2__del(struct soap*, const char*, struct ns2__del *, const char*);

SOAP_FMAC3 struct ns2__del * SOAP_FMAC4 soap_new_ns2__del(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__del(struct soap*, const struct ns2__del *, const char*, const char*);

#ifndef soap_write_ns2__del
#define soap_write_ns2__del(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__del(soap, data), 0) || soap_put_ns2__del(soap, data, "ns2:del", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__del
#define soap_PUT_ns2__del(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__del(soap, data), 0) || soap_put_ns2__del(soap, data, "ns2:del", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns2__del
#define soap_PATCH_ns2__del(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__del(soap, data), 0) || soap_put_ns2__del(soap, data, "ns2:del", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns2__del
#define soap_POST_send_ns2__del(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__del(soap, data), 0) || soap_put_ns2__del(soap, data, "ns2:del", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__del * SOAP_FMAC4 soap_get_ns2__del(struct soap*, struct ns2__del *, const char*, const char*);

#ifndef soap_read_ns2__del
#define soap_read_ns2__del(soap, data) ( ((data) ? (soap_default_ns2__del(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__del(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__del
#define soap_GET_ns2__del(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__del(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns2__del
#define soap_POST_recv_ns2__del(soap, data) ( soap_read_ns2__del(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__delResponse_DEFINED
#define SOAP_TYPE_ns2__delResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__delResponse(struct soap*, struct ns2__delResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__delResponse(struct soap*, const struct ns2__delResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__delResponse(struct soap*, const char*, int, const struct ns2__delResponse *, const char*);
SOAP_FMAC3 struct ns2__delResponse * SOAP_FMAC4 soap_in_ns2__delResponse(struct soap*, const char*, struct ns2__delResponse *, const char*);

SOAP_FMAC3 struct ns2__delResponse * SOAP_FMAC4 soap_new_ns2__delResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__delResponse(struct soap*, const struct ns2__delResponse *, const char*, const char*);

#ifndef soap_write_ns2__delResponse
#define soap_write_ns2__delResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__delResponse(soap, data), 0) || soap_put_ns2__delResponse(soap, data, "ns2:delResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__delResponse
#define soap_PUT_ns2__delResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__delResponse(soap, data), 0) || soap_put_ns2__delResponse(soap, data, "ns2:delResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns2__delResponse
#define soap_PATCH_ns2__delResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__delResponse(soap, data), 0) || soap_put_ns2__delResponse(soap, data, "ns2:delResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns2__delResponse
#define soap_POST_send_ns2__delResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__delResponse(soap, data), 0) || soap_put_ns2__delResponse(soap, data, "ns2:delResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__delResponse * SOAP_FMAC4 soap_get_ns2__delResponse(struct soap*, struct ns2__delResponse *, const char*, const char*);

#ifndef soap_read_ns2__delResponse
#define soap_read_ns2__delResponse(soap, data) ( ((data) ? (soap_default_ns2__delResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__delResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__delResponse
#define soap_GET_ns2__delResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__delResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns2__delResponse
#define soap_POST_recv_ns2__delResponse(soap, data) ( soap_read_ns2__delResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__add_DEFINED
#define SOAP_TYPE_ns2__add_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__add(struct soap*, struct ns2__add *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__add(struct soap*, const struct ns2__add *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__add(struct soap*, const char*, int, const struct ns2__add *, const char*);
SOAP_FMAC3 struct ns2__add * SOAP_FMAC4 soap_in_ns2__add(struct soap*, const char*, struct ns2__add *, const char*);

SOAP_FMAC3 struct ns2__add * SOAP_FMAC4 soap_new_ns2__add(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__add(struct soap*, const struct ns2__add *, const char*, const char*);

#ifndef soap_write_ns2__add
#define soap_write_ns2__add(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__add(soap, data), 0) || soap_put_ns2__add(soap, data, "ns2:add", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__add
#define soap_PUT_ns2__add(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__add(soap, data), 0) || soap_put_ns2__add(soap, data, "ns2:add", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns2__add
#define soap_PATCH_ns2__add(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__add(soap, data), 0) || soap_put_ns2__add(soap, data, "ns2:add", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns2__add
#define soap_POST_send_ns2__add(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__add(soap, data), 0) || soap_put_ns2__add(soap, data, "ns2:add", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__add * SOAP_FMAC4 soap_get_ns2__add(struct soap*, struct ns2__add *, const char*, const char*);

#ifndef soap_read_ns2__add
#define soap_read_ns2__add(soap, data) ( ((data) ? (soap_default_ns2__add(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__add(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__add
#define soap_GET_ns2__add(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__add(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns2__add
#define soap_POST_recv_ns2__add(soap, data) ( soap_read_ns2__add(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__addResponse_DEFINED
#define SOAP_TYPE_ns2__addResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__addResponse(struct soap*, struct ns2__addResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__addResponse(struct soap*, const struct ns2__addResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__addResponse(struct soap*, const char*, int, const struct ns2__addResponse *, const char*);
SOAP_FMAC3 struct ns2__addResponse * SOAP_FMAC4 soap_in_ns2__addResponse(struct soap*, const char*, struct ns2__addResponse *, const char*);

SOAP_FMAC3 struct ns2__addResponse * SOAP_FMAC4 soap_new_ns2__addResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__addResponse(struct soap*, const struct ns2__addResponse *, const char*, const char*);

#ifndef soap_write_ns2__addResponse
#define soap_write_ns2__addResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__addResponse(soap, data), 0) || soap_put_ns2__addResponse(soap, data, "ns2:addResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__addResponse
#define soap_PUT_ns2__addResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__addResponse(soap, data), 0) || soap_put_ns2__addResponse(soap, data, "ns2:addResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns2__addResponse
#define soap_PATCH_ns2__addResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__addResponse(soap, data), 0) || soap_put_ns2__addResponse(soap, data, "ns2:addResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns2__addResponse
#define soap_POST_send_ns2__addResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__addResponse(soap, data), 0) || soap_put_ns2__addResponse(soap, data, "ns2:addResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__addResponse * SOAP_FMAC4 soap_get_ns2__addResponse(struct soap*, struct ns2__addResponse *, const char*, const char*);

#ifndef soap_read_ns2__addResponse
#define soap_read_ns2__addResponse(soap, data) ( ((data) ? (soap_default_ns2__addResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__addResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__addResponse
#define soap_GET_ns2__addResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__addResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns2__addResponse
#define soap_POST_recv_ns2__addResponse(soap, data) ( soap_read_ns2__addResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_get_book_DEFINED
#define SOAP_TYPE_get_book_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_get_book(struct soap*, struct get_book *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_get_book(struct soap*, const struct get_book *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_get_book(struct soap*, const char*, int, const struct get_book *, const char*);
SOAP_FMAC3 struct get_book * SOAP_FMAC4 soap_in_get_book(struct soap*, const char*, struct get_book *, const char*);

SOAP_FMAC3 struct get_book * SOAP_FMAC4 soap_new_get_book(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_get_book(struct soap*, const struct get_book *, const char*, const char*);

#ifndef soap_write_get_book
#define soap_write_get_book(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_get_book(soap, data), 0) || soap_put_get_book(soap, data, "get-book", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_get_book
#define soap_PUT_get_book(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_get_book(soap, data), 0) || soap_put_get_book(soap, data, "get-book", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_get_book
#define soap_PATCH_get_book(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_get_book(soap, data), 0) || soap_put_get_book(soap, data, "get-book", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_get_book
#define soap_POST_send_get_book(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_get_book(soap, data), 0) || soap_put_get_book(soap, data, "get-book", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct get_book * SOAP_FMAC4 soap_get_get_book(struct soap*, struct get_book *, const char*, const char*);

#ifndef soap_read_get_book
#define soap_read_get_book(soap, data) ( ((data) ? (soap_default_get_book(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_get_book(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_get_book
#define soap_GET_get_book(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_get_book(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_get_book
#define soap_POST_recv_get_book(soap, data) ( soap_read_get_book(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTodouble_DEFINED
#define SOAP_TYPE_PointerTodouble_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostring_DEFINED
#define SOAP_TYPE_PointerTostring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

#ifdef SOAP_DEFAULT__QName
#define soap_default__QName(soap, a) (*(a) = SOAP_DEFAULT__QName)
#else
#define soap_default__QName(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__QName
#define soap_PUT__QName(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__QName
#define soap_PATCH__QName(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__QName
#define soap_POST_send__QName(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET__QName
#define soap_GET__QName(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read__QName(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv__QName
#define soap_POST_recv__QName(soap, data) ( soap_read__QName(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

#ifdef SOAP_DEFAULT_string
#define soap_default_string(soap, a) (*(a) = SOAP_DEFAULT_string)
#else
#define soap_default_string(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_string(soap, data, "string", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_string
#define soap_PUT_string(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_string
#define soap_PATCH_string(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_string
#define soap_POST_send_string(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_string
#define soap_GET_string(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_string(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_string
#define soap_POST_recv_string(soap, data) ( soap_read_string(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

/* End of soapH.h */
